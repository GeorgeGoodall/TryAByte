{
  "_from": "mungo",
  "_id": "mungo@2.3.2",
  "_inBundle": false,
  "_integrity": "sha1-htvl/svIuFwbwU5lCjGR7JM3iHY=",
  "_location": "/mungo",
  "_phantomChildren": {
    "buffer-shims": "1.0.0",
    "core-util-is": "1.0.2",
    "es6-promise": "3.2.1",
    "inherits": "2.0.3",
    "require_optional": "1.0.1",
    "safe-buffer": "5.1.2",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "escapedName": "mungo",
    "fetchSpec": "latest",
    "name": "mungo",
    "raw": "mungo",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mungo/-/mungo-2.3.2.tgz",
  "_shasum": "86dbe5fecbc8b85c1bc14e650a3191ec93378876",
  "_spec": "mungo",
  "_where": "/home/george/Documents/TryAByte",
  "author": "",
  "bundleDependencies": false,
  "dependencies": {
    "babel-polyfill": "^6.3.14",
    "colors": "^1.1.2",
    "kerberos": "0.0.17",
    "lodash": "^3.10.1",
    "mongodb": "^2.1.0",
    "promise-sequencer": "^2.0.1"
  },
  "deprecated": false,
  "description": "Mungo ===",
  "devDependencies": {
    "babel-cli": "^6.5.1",
    "babel-plugin-transform-builtin-extend": "^1.1.0",
    "babel-preset-es2015": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "redtea": "^3.4.1",
    "should": "^7.1.0"
  },
  "directories": {
    "test": "test"
  },
  "license": "ISC",
  "main": "dist/index.js",
  "name": "mungo",
  "optionalDependencies": {},
  "readme": "Mungo\n===\n\n`Mungo` is a library to create models for MongoDB.\n\n# Install\n\n```bash\nnpm install mungo\n```\n\n# Usage\n\n```js\nimport Mungo from 'mungo';\n\nclass User extends Mungo.Model {\n  static schema = { username : String };\n}\n\n// Connect to MongoDB\nMungo.connect('mongodb://@localhost');\n\nUser.create({ username : 'dude' });\n\nUser.find({ username : 'dude' });\n\nUser.update({ username : 'dude' }, { username : 'mate' });\n\nUser.remove({ username : 'dude' });\n```\n\n# Syntax\n\nAll operations are promises:\n\n```js\nFoo.find()\n  .then(found => { /*...*/ })\n  .catch(error => { /*...*/ });\n```\n\nSome methods are chainable:\n\n```js\nFoo\n  .find({ foo : 1 })\n  .limit(25)\n  .then(found => {});\n```\n\n# Connect\n\n```js\nMungo.connect(url);\n```\n\nConnecting by entering an url. Connect emits so you can listen to it:\n\n```js\nMungo.connect(url)\n  .on('error', error => console.log(error.stack))\n  .on('connected', connection => {\n    console.log(connection.db)\n  });\n```\n\nConnections are stacked in `Mungo.connections`. When you try to do a op, the first alive connection in array will be chosen.\n\nYou can force a connection to be used:\n\n```js\nMungo.connect(url1);\nMungo.connect(url2);\n\nFoo.find().connection(0);\nFoo2.find().connection(1);\n```\n\nOr specify the connection directly:\n\n```js\nMungo\n  .connect(url)\n  .on('connected', connection => Foo.find().connection(connection));\n```\n\n# Methods\n\n| Method | Arguments | About |\n|--------|-----------|-------|\n| `count`| - `<object> query` default `{}`<br/>- `<object> projection` default `{}` <br/>- `<object> options` default `{}`| Count documents in collection\n\n\n# Schema\n\n## Type\n\n```js\nclass User extends Mungo.Model {\n  static schema = { username : String, score : Number };\n}\n```\n\n### Types allowed\n\n- `String`\n- `Number`\n- `Boolean`\n- `Date`\n- `Array` *for a better array control, see below*\n- `Object` *for a better subdocument control, see below*\n- `Subdocument` *see below*\n- `ObjectID` *MongoDB's object id*\n- `Mixed` *accepts any type*\n\n### Array of types\n\nYou can enclose types inside arrays:\n\n```js\n// { numbers : [1, 2, 3] }\n\nstatic schema = { numbers : [Number] }\n```\n\n### Sudocuments\n\nUse the `Subdocument` to embed a document:\n\n```js\n// { foo : { bar : true } }\n\nstatic schema = { \"foo\" : new (Mungo.Subdocument)({ \"bar\" : Boolean }) }\n```\n\nYou could also use directly the object notation such as:\n\n```js\n// { foo : { bar : true } }\n\nstatic schema = { \"foo\" : { \"bar\" : Boolean } }\n```\n\nBut **you have to make sure your subdocument does not contain a `type` property** - otherwise it will be mistaken with a field description.\n\n### References to other model\n\nUse the name of the model you want to refer :\n\n```js\nclass Team extends Mungo.Model {\n  static schema = { \"name\" : String };\n}\n\nclass Player extends Mungo.Model {\n  static schema = { \"team\" : Team };\n}\n```\n\n### Cyclic dependencies\n\nIf your model uses references to other models that also refer it (cyclic dependency), you can use the getter syntax to make sure referred models do not end up null.\n\n```js\nstatic get schema () {\n  return { \"team\" : Team };\n}\n```\n\n### Type declaration\n\nYou can use the sugar syntax or the type attribute in the field description:\n\n```js\nstatic schema = { \"name\" : String }\n// Or...\nstatic schema = {\n  name : { \"type\" : String }\n}\n```\n\n### Default type\n\nIf you don't declare a type for a field, `Mixed` is used.\n\n## Required\n\nRequire a fill to be set when inserting to DB\n\n```js\nstatic schema = { \"name\" : { required : true } }\n```\n\n## Default\n\nFill empty field values with default when inserting to DB\n\n```js\nstatic schema = { \"score\" : { default : 0 } }\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "babel": "babel --out-dir dist app",
    "babel-watch": "babel --watch --out-dir dist app",
    "prepublish": "npm run babel && npm test",
    "test": "redtea dist/test"
  },
  "version": "2.3.2"
}
